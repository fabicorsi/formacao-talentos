USE [Treinamento]GOSET NOCOUNT ONSET IDENTITY_INSERT [dbo].[Curso_Descricao] ONMERGE INTO [dbo].[Curso_Descricao] AS TargetUSING (VALUES  (1,'Introdução ao SQL Server é um curso que...balalabablsblablabllablbalbalbalbablabllablbalbalbalbalblablbalbablablblablablalblablbablablablablbalblabla',1) ,(2,'Como fazer o apontamento de horas é um curso que...balalabablsblablabllablbalbalbalbablabllablbalbalbalbalblablbalbablablblablablalblablbablablablablbalblabla',2) ,(3,'Web API é um curso que...balalabablsblablabllablbalbalbalbablabllablbalbalbalbalblablbalbablablblablablalblablbablablablablbalblabla',3) ,(4,'Integração de Novos Funcionários é um curso que...balalabablsblablabllablbalbalbalbablabllablbalbalbalbalblablbalbablablblablablalblablbablablablablbalblabla',4) ,(5,'Como ser um youtuber é um curso que...balalabablsblablabllablbalbalbalbablabllablbalbalbalbalblablbalbablablblablablalblablbablablablablbalblabla',5)) AS Source ([Id],[Descricao],[IdCurso])ON (Target.[Id] = Source.[Id])WHEN MATCHED AND (
	NULLIF(Source.[Descricao], Target.[Descricao]) IS NOT NULL OR NULLIF(Target.[Descricao], Source.[Descricao]) IS NOT NULL) THEN UPDATE SET  [Descricao] = Source.[Descricao]WHEN NOT MATCHED BY TARGET THEN INSERT([Id],[Descricao],[IdCurso]) VALUES(Source.[Id],Source.[Descricao],Source.[IdCurso])WHEN NOT MATCHED BY SOURCE THEN  DELETE;GODECLARE @mergeError int , @mergeCount intSELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNTIF @mergeError != 0 BEGIN PRINT 'ERROR OCCURRED IN MERGE FOR [dbo].[Curso]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected ENDELSE BEGIN PRINT '[dbo].[Curso] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100)); ENDGOSET IDENTITY_INSERT [dbo].[Curso_Descricao] OFFGOSET NOCOUNT OFFGO